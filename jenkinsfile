pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
        CLIENT_IMAGE_NAME = "himagirinandan/my-frontend"
        SERVER_IMAGE_NAME = "himagirinandan/my-backend"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Client') {
            steps {
                dir('client') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Build Server') {
            steps {
                dir('server') {
                    sh 'npm install'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh "docker build -t ${CLIENT_IMAGE_NAME}:${IMAGE_TAG} ./client"
                sh "docker build -t ${SERVER_IMAGE_NAME}:${IMAGE_TAG} ./server"
                sh "docker tag ${CLIENT_IMAGE_NAME}:${IMAGE_TAG} ${CLIENT_IMAGE_NAME}:latest"
                sh "docker tag ${SERVER_IMAGE_NAME}:${IMAGE_TAG} ${SERVER_IMAGE_NAME}:latest"
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                sh "docker push ${CLIENT_IMAGE_NAME}:${IMAGE_TAG}"
                sh "docker push ${SERVER_IMAGE_NAME}:${IMAGE_TAG}"
                sh "docker push ${CLIENT_IMAGE_NAME}:latest"
                sh "docker push ${SERVER_IMAGE_NAME}:latest"
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deployment step placeholder - customize based on your target platform'
            }
        }
    }

    post {
        always {
            sh 'docker logout'
            sh "docker rmi ${CLIENT_IMAGE_NAME}:${IMAGE_TAG} || true"
            sh "docker rmi ${SERVER_IMAGE_NAME}:${IMAGE_TAG} || true"
        }
    }
}
